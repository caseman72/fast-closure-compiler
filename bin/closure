#!/usr/bin/env python
#
import re
import os
import sys
import time
import subprocess

# args
app = sys.argv[0]
argv = sys.argv[1:]

# check for 2 (src dest) args
if len(argv) != 2:
  sys.stderr.write('Usage: {0} <source file> <min destination>\n'.format(app))
  sys.exit(1)

# src + dest + dest path
source_file = os.path.realpath(sys.argv[1])
output_file = os.path.realpath(sys.argv[2])
output_dir = os.path.dirname(output_file)

# check for source file
if not os.path.isfile(source_file):
  sys.stderr.write('Usage: {0} <source file> <min destination>\n'.format(app))
  sys.stderr.write('Error: <source file> does not exist!\n')
  sys.exit(1)

# check for destination directory existance
if not os.path.isdir(output_dir):
  sys.stderr.write('Usage: {0} <source file> <min-destination>\n'.format(app))
  sys.stderr.write('Error: <min destination> directory does not exist!\n')
  sys.exit(1)

# get the package directory (../..)
dir = os.path.dirname(os.path.dirname(os.path.realpath(__file__)))

# ostype for version of ng ~ auto compiled for mac/linux
ostype = re.sub(r'[^a-z0-9]+', '', os.getenv('OSTYPE', 'linux').lower());

# command for ng
ng_app = '{0}/nailgun/{1}/ng'.format(dir, ostype)

# open dev-null to quiet processes
dev_null = open('/dev/null', 'w')

# start the server if it's not already running
if subprocess.call([ng_app, 'ng-stats'], stdout=dev_null, stderr=dev_null) != 0:
  # fix for nohup and tmux/screen ~ brew install reattach-to-user-namespace
  server = subprocess.Popen(['which', 'reattach-to-user-namespace'], stdout=subprocess.PIPE, stderr=dev_null).communicate()[0].split('\n')
  server = filter(lambda x: len(x) > 0, server)
  server = server + [
    'nohup',
    '/usr/bin/java',
    '-server',
    '-cp',
    '{0}/nailgun/nailgun.jar:{0}/closure-compiler/compiler.jar:{0}/yui-compressor/yuicompressor.jar'.format(dir),
    'com.martiansoftware.nailgun.NGServer'
  ]
  subprocess.Popen(server, stdout=dev_null, stderr=dev_null)

  # loop until ng ng-stats works
  for i in range(10):
    time.sleep(1)

    if subprocess.call([ng_app, 'ng-stats'], stdout=dev_null, stderr=dev_null) == 0:
      break;

# regex for files
re_min = re.compile(r'\.min\.')
re_js = re.compile(r'\.js$')
re_css = re.compile(r'\.css$')

# error if
exit_code = 1

# check for min version - copy only
if re_min.search(source_file) is not None:
  # no error unless copy fails
  exit_code = subprocess.call(['cp', '-f', source_file, output_file], stdout=dev_null, stderr=dev_null)

# check for js
elif re_js.search(source_file) is not None:
  # compiler options
  compiler = [
    '--compilation_level', 'SIMPLE_OPTIMIZATIONS',
    '--language_in', 'ECMASCRIPT5',
    '--warning_level', 'QUIET',
#   '--formatting', 'PRETTY_PRINT',
    '--js', source_file,
    '--js_output_file', output_file
  ]

  # forward the exit code from the compiler
  exit_code = subprocess.call([ng_app, 'com.google.javascript.jscomp.CommandLineRunner'] + compiler)

  # syntax error
  if exit_code != 0:
    subprocess.call(['cp', '-f', source_file, output_file], stdout=dev_null, stderr=dev_null)

  # all is well
  else:
    # but fix the PRETTY_PRINT if set set ~ off by default
    if len(filter(lambda x: 'PRETTY_PRINT' == x, compiler)) > 0:
      sed = subprocess.Popen(['which', 'sed'], stdout=subprocess.PIPE, stderr=dev_null).communicate()[0].split('\n')
      sed = filter(lambda x: len(x) > 0, sed)
      sed = sed + [
        '-i', '""', # this fixes mac version
        '-e', ':l',
        '-e', r's/^\({0}\)*[ ][ ]/\1{0}/g'.format('\t'), # trick to get tab in string
        '-e', 'tl',
        '-e', ':a',
        '-e', '/^\\n*$/{$d;N;ba',
        '-e', '}',
        output_file
      ]

      # with PRETTY_PRINT ~ change 2 spaces to tabs, remove traling white space
      subprocess.call(sed, stdout=dev_null, stderr=dev_null)

# check for css
elif re_css.search(source_file) is not None:
  # compiler options
  compiler = [
    '--type', 'css',
    '--line-break', '0',
    '-o', output_file,
    source_file
  ]

  # forward the exit code from the compiler
  exit_code = subprocess.call([ng_app, 'com.yahoo.platform.yui.compressor.Bootstrap'] + compiler)

  # syntax error ~ not many on css files tho
  if exit_code != 0:
    subprocess.call(['cp', '-f', source_file, output_file], stdout=dev_null, stderr=dev_null)

# quit same as compiler
sys.exit(exit_code)
