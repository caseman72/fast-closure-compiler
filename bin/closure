#!/usr/bin/env python

import os
import sys
import time
import subprocess

# args
app = sys.argv[0]
argv = sys.argv[1:]

# check for src dest in args (only)
if len(argv) != 2:
  sys.stderr.write('Usage: {0} <source file> <min destination>\n'.format(app))
  sys.exit(1)

# files
js = os.path.realpath(sys.argv[1])
js_output_file = os.path.realpath(sys.argv[2])
js_output_dir = os.path.dirname(js_output_file)

# check for source file
if not os.path.isfile(js):
  sys.stderr.write('Usage: {0} <source file> <min destination>\n'.format(app))
  sys.stderr.write('Error: <source file> does not exist!\n')
  sys.exit(1)

# check for destination directory
if not os.path.isdir(js_output_dir):
  sys.stderr.write('Usage: {0} <source file> <min-destination>\n'.format(app))
  sys.stderr.write('Error: <min destination> directory does not exist!\n')
  sys.exit(1)

# get the package directory
dir = os.path.dirname(os.path.dirname(os.path.realpath(__file__)))

# the command for the server that should show up in the process list
server = [
  'java',
  '-server',
  '-cp',
  '{0}/nailgun/nailgun.jar:{0}/closure-compiler/compiler.jar'.format(dir),
  'com.martiansoftware.nailgun.NGServer'
]

# open dev-null to quiet processes
dev_null = open('/dev/null', 'w')

# need to see if server is running
output = subprocess.Popen(['ps', 'x', '-o', 'command'], stdout=subprocess.PIPE).communicate()[0].split('\n')
output = filter(lambda x: 'java' in x, output)
output = filter(lambda x: ' '.join(server) == x, output)

# start the server if it's not already running
if len(output) == 0:
  subprocess.Popen(['nohup'] + server, stdout=dev_null, stderr=dev_null)
  time.sleep(2)

# compiler options
compiler = [
  '--compilation_level', 'SIMPLE_OPTIMIZATIONS',
  '--language_in', 'ECMASCRIPT5',
  '--warning_level', 'QUIET',
#  '--formatting', 'PRETTY_PRINT',
  '--js', js,
  '--js_output_file', js_output_file
]

# forward the exit code from the compiler
exit_code = subprocess.call([dir + '/nailgun/ng', 'com.google.javascript.jscomp.CommandLineRunner'] + compiler)

# all is well
if exit_code == 0:
  if len(filter(lambda x: 'PRETTY_PRINT' == x, compiler)):
    # with PRETTY_PRINT ~ change 2 spaces to tabs, remove traling white space
    subprocess.call(['sed', '-i', '""', '-e', ':l', '-e', 's/^\\(\\t\\)*[ ][ ]/\\1\\t/g', '-e', 'tl', '-e', ':a', '-e', '/^\\n*$/{$d;N;ba', '-e', '}', js_output_file], stdout=dev_null, stderr=dev_null)

# syntax error
else:
  subprocess.call(['cp', '-f', js, js_output_file], stdout=dev_null, stderr=dev_null)

# quit same as compiler
sys.exit(exit_code)

